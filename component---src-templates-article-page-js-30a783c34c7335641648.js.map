{"version":3,"sources":["webpack:///./src/templates/article-page.js"],"names":["query","ArticleMeta","Object","_emotion_styled_base__WEBPACK_IMPORTED_MODULE_2__","target","gap","s","columnWidth","xs","DateContainer","l","font","size","m","color","grey","Tag","xxxs","xxs","Tags","name","styles","ArticlePage","render","article","this","props","data","markdownRemark","tags","frontmatter","split","date","Date","parse","formatter","Intl","DateTimeFormat","_emotion_core__WEBPACK_IMPORTED_MODULE_3__","_pages_blog__WEBPACK_IMPORTED_MODULE_8__","react_helmet__WEBPACK_IMPORTED_MODULE_9__","title","globalStyles","_components_header__WEBPACK_IMPORTED_MODULE_6__","format","map","tag","index","key","dangerouslySetInnerHTML","__html","html","React","Component"],"mappings":"4OAUaA,EAAK,aAaZC,EAAcC,OAAAC,EAAA,EAAAD,CAAA,OAAHE,OAAA,YAAGF,CAAH,iDAIIG,IAAIC,EAJR,sBAMQC,IANR,mBAOQF,IAAIG,GAPZ,MAWXC,EAAgBP,OAAAC,EAAA,EAAAD,CAAA,QAAHE,OAAA,YAAGF,CAAH,gBACCG,IAAIK,EADL,IAGbC,IAAKC,KAAKC,EAHG,UAINC,IAAMC,KAAK,KAJL,sBAMMR,IANN,kBAOKF,IAAIC,EAPT,IASTK,IAAKC,KAAKN,EATD,MAabU,EAAMd,OAAAC,EAAA,EAAAD,CAAA,OAAHE,OAAA,YAAGF,CAAH,WACMG,IAAIY,KADV,IACkBZ,IAAIC,EADtB,UAGIQ,IAAMC,KAAK,KAHf,IAIHJ,IAAKC,KAAKC,EAJP,qBAMeC,IAAMC,KAAK,KAN1B,uDAUeV,IAAIG,GAVnB,uBAagBD,IAbhB,kBAceF,IAAIC,EAdnB,IAgBCK,IAAKC,KAAKN,EAhBX,oCAmBmBD,IAAIa,IAnBvB,OAwBHC,EAAOjB,OAAAC,EAAA,EAAAD,CAAA,OAAHE,OAAA,YAAGF,CAAH,CAAAkB,KAAA,SAAAC,OAAA,kBAIJC,4FACFC,OAAA,WACI,IAAMC,EAAUC,KAAKC,MAAMC,KAAKC,eAC1BC,EAAOL,EAAQM,YAAYD,KAAKE,MAAM,KAEtCC,EAAO,IAAIC,KAAKA,KAAKC,MAAMV,EAAQM,YAAYE,OAC/CG,EAAY,IAAIC,KAAKC,eAE3B,OACInC,OAAAoC,EAAA,EAAApC,CAACqC,EAAA,UAAD,KACIrC,OAAAoC,EAAA,EAAApC,CAACsC,EAAA,OAAD,KACItC,OAAAoC,EAAA,EAAApC,CAAA,8BAAsBsB,EAAQM,YAAYW,QAE9CvC,OAAAoC,EAAA,EAAApC,CAACoC,EAAA,EAAD,CAAQjB,OAAQqB,MAChBxC,OAAAoC,EAAA,EAAApC,CAACyC,EAAA,EAAD,MACAzC,OAAAoC,EAAA,EAAApC,CAAA,YACIA,OAAAoC,EAAA,EAAApC,CAAA,eACIA,OAAAoC,EAAA,EAAApC,CAACD,EAAD,KACIC,OAAAoC,EAAA,EAAApC,CAACO,EAAD,KAAgB0B,EAAUS,OAAOZ,IACjC9B,OAAAoC,EAAA,EAAApC,CAACiB,EAAD,KACKU,EAAKgB,IAAI,SAACC,EAAKC,GAAN,OACN7C,OAAAoC,EAAA,EAAApC,CAACc,EAAD,CAAKgC,IAAKD,GAAQD,OAI9B5C,OAAAoC,EAAA,EAAApC,CAAA,UAAKsB,EAAQM,YAAYW,OACzBvC,OAAAoC,EAAA,EAAApC,CAAA,OACI+C,wBAAyB,CAAEC,OAAQ1B,EAAQ2B,eA3B7CC,IAAMC,WAoCjB/B","file":"component---src-templates-article-page-js-30a783c34c7335641648.js","sourcesContent":["import React from 'react';\nimport { graphql } from 'gatsby';\nimport styled from '@emotion/styled';\nimport { Global } from '@emotion/core';\nimport { globalStyles } from '../global-styles';\nimport Header from '../components/header';\nimport { font, gap, columnWidth, color } from './../style';\nimport { Container } from './../pages/blog';\nimport { Helmet } from 'react-helmet';\n\nexport const query = graphql`\n    query($slug: String!) {\n        markdownRemark(fields: { slug: { eq: $slug } }) {\n            html\n            frontmatter {\n                title\n                date\n                tags\n            }\n        }\n    }\n`;\n\nconst ArticleMeta = styled.div`\n    display: flex;\n    align-items: center;\n\n    margin-bottom: ${gap.s};\n\n    @media (max-width: ${columnWidth}) {\n        margin-bottom: ${gap.xs};\n    }\n`;\n\nconst DateContainer = styled.span`\n    margin-right: ${gap.l};\n\n    ${font.size.m};\n    color: ${color.grey[700]};\n\n    @media (max-width: ${columnWidth}) {\n        margin-right: ${gap.s};\n\n        ${font.size.s};\n    }\n`;\n\nconst Tag = styled.div`\n    padding: ${gap.xxxs} ${gap.s};\n\n    color: ${color.grey[700]};\n    ${font.size.m};\n\n    border: 1px solid ${color.grey[500]};\n    border-radius: 16px;\n\n    &:not(:last-child) {\n        margin-right: ${gap.xs};\n    }\n\n    @media (max-width: ${columnWidth}) {\n        margin-right: ${gap.s};\n\n        ${font.size.s};\n\n        &:not(:last-child) {\n            margin-right: ${gap.xxs};\n        }\n    }\n`;\n\nconst Tags = styled.div`\n    display: flex;\n`;\n\nclass ArticlePage extends React.Component {\n    render() {\n        const article = this.props.data.markdownRemark;\n        const tags = article.frontmatter.tags.split(',');\n\n        const date = new Date(Date.parse(article.frontmatter.date));\n        const formatter = new Intl.DateTimeFormat();\n\n        return (\n            <Container>\n                <Helmet>\n                    <title>Jane's blog â€” {article.frontmatter.title}</title>\n                </Helmet>\n                <Global styles={globalStyles} />\n                <Header />\n                <main>\n                    <article>\n                        <ArticleMeta>\n                            <DateContainer>{formatter.format(date)}</DateContainer>\n                            <Tags>\n                                {tags.map((tag, index) => (\n                                    <Tag key={index}>{tag}</Tag>\n                                ))}\n                            </Tags>\n                        </ArticleMeta>\n                        <h1>{article.frontmatter.title}</h1>\n                        <div\n                            dangerouslySetInnerHTML={{ __html: article.html }}\n                        />\n                    </article>\n                </main>\n            </Container>\n        );\n    }\n}\n\nexport default ArticlePage;\n"],"sourceRoot":""}